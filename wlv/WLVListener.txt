// WLV by Sila Dione / Tursi Jackson - 107 - 9/20/2021
// This integrates a Genesis (1/2/3) - compatible base AO with
// some RLV gestures for turning, and monitors for comms/moves (63/67)
// and a promo relay
//
// We work around the AO race issue by not doing a manual AO, we just use llSetAnimationOverride!
// We don't do STAND because the way that CLEAR works makes it break pretty badly. Everything else
// should be okay! :)
//
// ** debug stuff **
// it's the define, not the value that matters
//#define DEBUG 1

// debug wrapper
#ifdef DEBUG
debug(string str) {
    llOwnerSay("WLVDEBUG[" + (string)llGetTime() + "]: " + str);
}
#else
#define debug(dummy)
#endif

// ** Gesture Stuff **
// channel must match the channel used in the gestures!
// RLV channels must be positive!
#define GESTURECHAN 56929
integer gestureListen = 0;

#define FULLPI 3.14159265
#define HALFPI 1.57079633

// ** AO stuff **
#define ROTATE_ON <0.00000, 0.00000, -1.00000, 0.00000>
#define ROTATE_OFF <-0.00000, -0.00000, 0.70711, 0.70711>
#define ROTATE_PAUSE <0.00000, 0.00000, -0.70711, 0.70711>
#define ROTATE_RESET <-0.00000, -0.00000, 0.00000, 1.00000>

// track our state
integer gotSettings = 0;
integer gotRLV = 0;
integer gotAO = -1;
integer aoOn = 0;

// these hold the AO animations to actually use
string WALKANIM;
string RUNANIM;
string JUMPANIM;
string STANDUPANIM;

// comms/moves monitors
#define COMMSHUDCHAN 63     // channel for comms (for listening only, normally 63)
#define WRESTLEHUDCHAN 67   // normally 67, for ring in gestures and move monitor
integer listenMode = 3;        // bit 0 = moves, bit 1 = comms, bit 2 = no filter
integer commsHandle=0;      // holds the listen handle for comms
integer movesHandle=0;      // holds the listen handle for moves

// ** Settings stuff
// reading the settings notecard
#define settingsCard "settings"
key cardHandle;                 // reading handle
integer cardLine;               // reading line
key cardUUID;                   // lets us detect that it was the notecard which changed

// ** promo stuff
string promoCard = "";
string promoText = "";
string promoName = "";
string originalName = "";
key promoHandle;
integer promoLine; 
integer promoChan = 0;

// remember values
key owner;

// We don't need on and off modes anymore, as the AO is internal now, no animations are triggered
seton() {
    llSetLinkPrimitiveParamsFast( LINK_THIS, [PRIM_ROT_LOCAL, ROTATE_ON] );
}

// not used anymore, unless we fail to start
setoff() {
    llSetLinkPrimitiveParamsFast( LINK_THIS, [PRIM_ROT_LOCAL, ROTATE_OFF] );
}

// not used anymore
setpaused(float pause) {
    llSetLinkPrimitiveParamsFast( LINK_THIS, [PRIM_ROT_LOCAL, ROTATE_PAUSE] );    
}

// helper function to check if animation in inventory, save a little memory
integer checkInventory(string str, integer type) {
    if (type != llGetInventoryType(str)) {
        llOwnerSay("WLV: Failed inventory check, wrong type or can't find: '" + str + "'");
        return 0;
    }
    return 1;
}

stopAO() {
    llResetAnimationOverride("ALL");
    if (aoOn) llOwnerSay("AO disabled.");
    aoOn = 0;
}

startAO() {
    string aos = "";
    
    if (gotAO < 0) {
        llOwnerSay("No AO defined!");
        aoOn = 0;
        return;
    }
    if (WALKANIM != "") { aos += "Walk "; llSetAnimationOverride("Walking", WALKANIM); }
    if (RUNANIM != "") { aos += "Run "; llSetAnimationOverride("Running", RUNANIM); }
    if (JUMPANIM != "") { aos += "Jump "; llSetAnimationOverride("Jumping", JUMPANIM); }
    if (STANDUPANIM != "") { aos += "Get up"; llSetAnimationOverride("Standing Up", STANDUPANIM); }
    
    llOwnerSay("AOs activated: " + aos);
    aoOn = 1;
}

// manages the 8 possible combinations
handleCommsToggle() {
    string moves;
    string comms;
    string filter="";
    
    if (listenMode & 1) {
        if (movesHandle == 0) {
            movesHandle = llListen(WRESTLEHUDCHAN, "", NULL_KEY, "");
        }
        moves = "WLV: Moves (ON ) ";
    } else {
        if (movesHandle != 0) {
            llListenRemove(movesHandle);
            movesHandle = 0;
        }
        moves = "WLV: Moves (OFF) ";
    }

    if (listenMode & 2) {
        if (commsHandle == 0) {
            commsHandle = llListen(COMMSHUDCHAN, "", NULL_KEY, "");
        }
        comms = "Comms (ON ) ";
    } else {
        if (commsHandle != 0) {
            llListenRemove(commsHandle);
            commsHandle = 0;
        }
        comms = "Comms (OFF) ";
    }

    if (listenMode & 4) { filter = "(no filter)"; }
    
    llOwnerSay(moves + comms + filter);
}

// fetch a new line from the promo and display it
handlePromoLine() {
    if (llGetInventoryKey(promoCard) == NULL_KEY) {
        llOwnerSay("WLV: Can't load promo card: " + promoCard);
    } else {
        promoHandle = llGetNotecardLine(promoCard, promoLine);    // 0.1s delay
    }
}

default
{
    state_entry()
    {
        // visual feedback
        llSetLinkPrimitiveParamsFast( LINK_THIS, [PRIM_ROT_LOCAL, ROTATE_RESET] );    
        
        // remember who owns us
        owner = llGetOwner();
        if (llGetAttached() == 0) {
            llOwnerSay("WLV: HUD is not attached - disabling.");
            state dead;
        }
        promoName = llGetDisplayName(owner);
        originalName = llGetObjectName();
        
        // ask if RLV is there
        llSetTimerEvent(30.0);
        gestureListen = llListen(GESTURECHAN, "", llGetOwner(), "");
        llOwnerSay("@version="+(string)GESTURECHAN);

        // start the notecard while we wait
        llOwnerSay("WLV: Reading notecard...");
        
        cardUUID = llGetInventoryKey(settingsCard);
        cardLine = 0;
        cardHandle = llGetNotecardLine(settingsCard, cardLine);
    }
    
    on_rez(integer n) {
        llResetScript();
    }
    
    changed(integer change) {
        if (change & CHANGED_INVENTORY) {
            if (cardUUID != llGetInventoryKey(settingsCard)) {
                llResetScript();
            }
        }
    }
    
    attach(key id) {
        if (NULL_KEY != id) {
            llResetScript();
        }
    }

    listen(integer channel, string who, key id, string msg) {
        if (channel == GESTURECHAN) {
            if (llGetSubString(msg, 0, 9) == "Restrained") {
                // least common case - version return
                llOwnerSay("WLV: RLV detected.");
                llSetTimerEvent(0.0);
                gotRLV = 1;
                if (gotSettings) {
                    state main;
                }
                return;
            }
        }
    }
    
    timer() {
        llSetTimerEvent(0.0);
        llOwnerSay("WLV: Did not receive reply from RLV system, is it on?");
        state dead;
    }

    // input from the settings notecard
    dataserver(key id, string data) {
        if (id == cardHandle) {
            if (data == EOF) {
                llOwnerSay("WLV: Notecard read complete, " + (string)llGetFreeMemory() + " bytes free.");
                gotSettings = 1;
                if (gotRLV) {
                    state main;
                }
                return;
            }
            
            // increment early - it's better for debug
            ++cardLine;
            
            data = llStringTrim(data, STRING_TRIM);
            if ((llStringLength(data) > 0) && (llGetSubString(data, 0, 0) != "#")) {
                // now we are looking for token=value strings
                list lst = llParseString2List(data, ["="], []);
                if (llGetListLength(lst) == 2) {
                    // token=value
                    string token = llToUpper(llStringTrim(llList2String(lst, 0), STRING_TRIM));
                    string value = llStringTrim(llList2String(lst, 1), STRING_TRIM);
                    
                    if (token == "WALKANIM") {
                        WALKANIM = value;
                        if (!checkInventory(WALKANIM, INVENTORY_ANIMATION)) {
                            state dead; 
                        }
                    } else if (token == "STANDANIM") {
                        // ignore this
                        llOwnerSay("WLV: STANDANIM is obsolete, you may remove it.");
                    } else if (token == "RUNANIM") {
                        RUNANIM = value;
                        if (!checkInventory(RUNANIM, INVENTORY_ANIMATION)) {
                            state dead; 
                        }
                    } else if (token == "JUMPANIM") {
                        JUMPANIM = value;

                        if (!checkInventory(JUMPANIM, INVENTORY_ANIMATION)) {
                            state dead; 
                        }
                    } else if (token == "STANDUPANIM") {
                        STANDUPANIM = value;
                        if (!checkInventory(STANDUPANIM, INVENTORY_ANIMATION)) {
                            state dead; 
                        }
                    } else if (token == "LISTEN") {
                        listenMode = (integer)value;
                        if (listenMode > 7) {
                            llOwnerSay("WLV: Listen value of " + (string)listenMode + " is too large, resetting to default 3.");
                            listenMode = 3;
                        } else if (listenMode == 0) {
                            llOwnerSay("WLV: Warning: Listen value read as 0 which means NO listens active.");
                        }
                    } else if (token == "PROMOCARD") {
                        promoCard = value;
                        llOwnerSay("WLV: Registering promo card '" + promoCard + "'");
                    } else if (token == "PROMOCHAN") {
                        promoChan = (integer)value;
                        llOwnerSay("WLV: Registering promo channel of " + (string)promoChan);
                    } else if (token == "PROMONAME") {
                        promoName = value;
                        llOwnerSay("WLV: Using promo name of '" + promoName + "'");
                    } else {
                        llOwnerSay("WLV: Unknown token in line " + (string)cardLine + ": " + data);
                        state dead;
                    }
                }
            }

            // and request the next line
            cardHandle = llGetNotecardLine(settingsCard, cardLine);
        }
    }
}

state dead
{
    on_rez(integer x) {
        llResetScript();
    }
    
    attach(key id) {
        if (id != NULL_KEY) { 
            llResetScript();
        }
    }
    
    changed(integer change) {
        if (change & CHANGED_INVENTORY) {
            if (cardUUID != llGetInventoryKey(settingsCard)) {
                llResetScript();
            }
        }
    }
    
    state_entry()
    {
        setoff();
        llOwnerSay("WLV: Startup failed - correct and then reset all scripts");
        llSetTimerEvent(0.0);
    }
}

state main
{
    on_rez(integer x) {
        llResetScript();
    }
    
    attach(key id) {
        if (id != NULL_KEY) { 
            llResetScript();
        }
    }
    
    changed(integer change) {
        if (change & CHANGED_INVENTORY) {
            if (cardUUID != llGetInventoryKey(settingsCard)) {
                llResetScript();
            }
        }
    }

    state_entry()
    {
        string aos;
        if (WALKANIM != "") { gotAO = 1; aos += "walk "; }
        if (RUNANIM != "") { gotAO = 1; aos += "run "; }
        if (JUMPANIM != "") { gotAO = 1;  aos += "jump "; }
        if (STANDUPANIM != "") { gotAO = 1; aos += "stand up "; }
        if (gotAO > 0) { 
            llOwnerSay("WLV: Replacement animations defined: " + aos);
            // get animation permissions
            llRequestPermissions(owner, PERMISSION_OVERRIDE_ANIMATIONS);
        } else {
            llOwnerSay("WLV: No Animations defined");
        }
        gestureListen = llListen(GESTURECHAN, "", llGetOwner(), "");
        llSetTimerEvent(0.0);
        handleCommsToggle();
        llOwnerSay("WLV Ready to go!");
        seton();
    }

    // comes here after state_entry's request for animation permissions, finish up if we get them
    run_time_permissions(integer p) {
        if (p & PERMISSION_OVERRIDE_ANIMATIONS) {
            stopAO();
            startAO();
        } else {
            llOwnerSay("WLV: AO functions will not activate due to no permission.");
            gotAO = -1;
        }
    }
    
    listen(integer chan, string name, key id, string msg) {
        if (chan == GESTURECHAN) {
            if (msg == "L90") {
                // left turn
                vector fwd = <1,0,0>*llGetRootRotation();
                float angle = llAtan2(fwd.x, fwd.y) - HALFPI;
                llOwnerSay("@setrot:" + (string)angle + "=force");
            } else if (msg == "R90") {
                // right turn
                vector fwd = <1,0,0>*llGetRootRotation();
                float angle = llAtan2(fwd.x, fwd.y) + HALFPI;
                llOwnerSay("@setrot:" + (string)angle + "=force");
            } else if (msg == "L180") {
                // left 180 - to force left, try to avoid sign change
                // just observation, but seems to work for now
                vector fwd = <1,0,0>*llGetRootRotation();
                // half to do it as two steps to force left turn
                float angle = llAtan2(fwd.x, fwd.y) - HALFPI;
                llOwnerSay("@setrot:" + (string)angle + "=force");
                llSleep(0.1);
                angle -= HALFPI;
                llOwnerSay("@setrot:" + (string)angle + "=force");
            }
            // lower priority inputs from menu and promo system
            else if (msg == "Comms") {
                if (listenMode & 2) {
                    listenMode -= 2;
                } else {
                    listenMode += 2;
                }
                handleCommsToggle();                
            } else if (msg == "Moves") {
                if (listenMode & 1) {
                    listenMode -= 1;
                } else {
                    listenMode += 1;
                }
                handleCommsToggle();
            } else if (msg == "Filter") {
                if (listenMode & 4) {
                    listenMode -= 4;
                } else {
                    listenMode += 4;
                }
                handleCommsToggle();
            } else if (msg == "AO") {
                if (aoOn) {
                    stopAO();
                } else {
                    startAO();
                }
            } else if (msg == "Promo") {
                handlePromoLine();
            } else if (msg == "Reset Promo") {
                promoLine = 0;
                llOwnerSay("WLV: Promo reset to start.");
            } else if (msg == "<<") {
                if (promoLine > 0) promoLine--;
                handlePromoLine();
            } else if (msg == ">>") {
                promoLine++;
                handlePromoLine();
            } else if (msg == "Shout") {
                llSetObjectName(promoName);
                    llShout(promoChan, promoText);
                llSetObjectName(originalName);
                promoLine++;
                handlePromoLine();
            }
        } else if ((chan == WRESTLEHUDCHAN)||(chan == COMMSHUDCHAN)) {
            if ((listenMode & 4) || (llSameGroup(id))) {
                llOwnerSay("WLV: (( [" + (string)chan + " (" + llKey2Name(id) + ")] " + msg + "))");
            }
        }
    }
    
    touch_start(integer cnt) {
        list btns = ["Comms","Moves","Filter"];
        if (gotAO > 0) btns += ["AO"];
        if (promoCard != "") btns += ["Promo","Reset Promo"];
        llDialog(llDetectedKey(0), "WLV SELECT", btns, GESTURECHAN);
    }
    
    // input from the settings notecard
    dataserver(key id, string data) {
        if (id == promoHandle) {
            if (data == EOF) {
                llOwnerSay("WLV: promo complete, card ended.");
                promoLine = 0;
                return;
            }
            
            promoText = llStringTrim(data, STRING_TRIM);
            // skip over blank lines
            if (promoText == "") {
                promoLine++;
                handlePromoLine();
                return;
            }
            
            // otherwise, we have something! Prompt the user:
            llDialog(llGetOwner(), "WLV Promo: " + promoText, ["<<","Shout",">>"], GESTURECHAN);
        }
    }
    
}
